package prefab;
import java.util.Random;import java.util.Vector;
import org.newdawn.slick.Color;import org.newdawn.slick.GameContainer;import org.newdawn.slick.Graphics;import org.newdawn.slick.Image;import org.newdawn.slick.geom.Circle;import org.newdawn.slick.geom.Point;import org.newdawn.slick.geom.Shape;import org.newdawn.slick.state.StateBasedGame;
import Scenes.GameScene;
import forSlick2D.BasicScene;import forSlick2D.GameObject;
public class Boss1 extends Enemy {  Image img; int cnt, tCnt; int step, _step; Random rand = new Random(); Player shooter = null;
 public Boss1() {  // TODO Auto-generated constructor stub }
 public Boss1(BasicScene scene) {  super(scene);  // TODO Auto-generated constructor stub }
 public Boss1(BasicScene scene, float posX, float posY, int tag) {  super(scene, posX, posY, tag);  // TODO Auto-generated constructor stub    try{      img = new Image("rsc/game/enemy1.png");     }catch(Exception e){   e.printStackTrace();  }    this.zorder = 4;  this.isLive = false;    step = 0;  _step = 0;    cnt = 0;  tCnt = 0; }
 @Override public void update() {  // TODO Auto-generated method stub    Point pos = new Point(posX, posY);    pos = BasicScene.getNextPos(posX, posY, this.degree, this.speed);    switch(step){  case 0://등장 중 (무적)   if(posX<=520.0f){        //자리에 오면 잠시 딜레이. 이후 이동하면서 공격    step = 6;    cnt = 0;    this.speed = 0;   }   break;  case 1://연사 공격      if(cnt%2==0){        EBullet1 bullet = new EBullet1(scene, posX - 20, posY + rand.nextInt(100)-50, 0, 7.0f, 270);    bullet.setName("EBULLET");    scene.addChild(bullet);   }      if(cnt%10==0)    ((GameScene)scene).playSound(5);      if(cnt==100){    step = 6;    cnt = 0;   }   break;  case 2://상하 이동      if(this.speed<=0){        if(posY > getTargetY())     this.degree = 0;    else     this.degree = 180;        this.speed = 4.0f;    cnt = 0;   }else{        if( (posY<50&&this.degree==0) || (posY>430&&this.degree==180) || cnt==30){     //이동 끝났으면 공격     this.speed = 0;     step = 1;     cnt = 0;    }   }      break;  case 3://돌격   if(posX<=120){    step = 4;    cnt = 0;    this.speed = 2.0f;    this.degree = 90;   }   break;  case 4://원위치(슈트)   if(posX>=520){    step = 6;    cnt = 0;    this.speed = 0;   }else{    if(cnt%10==0){     for(int i=0;i<360;i+=15){            EBullet1 bullet = new EBullet1(scene, posX, posY, 0, 2.0f, i);      bullet.setName("EBULLET");      scene.addChild(bullet);     }     ((GameScene)scene).playSound(5);    }   }   break;  case 5://퇴각(무적)   if(posX>700){    //((GameScene)scene).setClear();    step = 8;//아무것도 하지 않는 상태    cnt = 0;   }   break;  case 6://상하 이동 후 딜레이   if(cnt==60){    step = 2;    cnt = 0;    _step++;    if(_step==3){          //돌격     step = 3;     this.speed = 7.0f;     this.degree = 270;     _step = 0;    }   }   break;  case 7://파괴   int _delay = (cnt>120)?6:12; 
   if(cnt%_delay==0){        shooter.setMyScore(shooter.getMyScore() + 5);        ParticleEffect efct = new ParticleEffect(scene, posX + rand.nextInt(120)-60, posY + rand.nextInt(120)-60, "rsc/game/explode.png");    scene.addChild(efct);    efct.setScale(2.0f);    efct.setStart(4, 4, 2, 1);//프레임 구성이 가로로 4장, 세로로 4장, 프레임 당 딜레이 2카운트, 반복횟수 1회
    ((GameScene)scene).playSound(1);//파괴   }      if(cnt==240){        ParticleEffect efct = new ParticleEffect(scene, posX, posY-20, "rsc/game/explode.png");    scene.addChild(efct);    efct.setScale(5.0f);    efct.setStart(4, 4, 5, 1);
    ((GameScene)scene).playSound(3);//완파
    step = 8;//아무것도 하지 않는 상태    cnt = 0;   }   break;  case 8:   if(cnt==240){        ((GameScene)scene).setClear();   }   break;  }    posX = pos.getX();  posY = pos.getY();      if(tCnt>3600){   //등장하고 1분 이상 지나면 철수한다   step = 5;   cnt = 0;   this.speed =2.0f;   this.degree = 90;  }
  cnt++;  tCnt++; }
 @Override public void render(GameContainer cont, StateBasedGame state, Graphics g) {  // TODO Auto-generated method stub
  if(step==8){   rect = null;   return;  }      img.drawCentered(posX, posY);
  if(step==7){   rect = null;  }else   rect = new Circle(posX, posY, 80.0f);    if(scene.getDebug()){      if(rect!=null){    g.setColor(Color.red);    g.draw(rect);   }      g.setColor(Color.white);   g.drawString("Boss Hp " + this.hp, 10, 420);  } }
 @Override public void remove() {  // TODO Auto-generated method stub
 }
 @Override public void setInit(float posX, float posY, int moving) {  // TODO Auto-generated method stub
  this.posX = 740;  this.posY = 240;    this.degree = 270;  this.speed = 1.5f;    this.hp = 200;    this.isLive = true; }
 @Override public int setHit(int damage, Player shooter) {  // TODO Auto-generated method stub    this.shooter = shooter;    if(step==0 || step==5)//등장/퇴각시에는 무적 상태   return 0;    int ret = damage - this.hp;  shooter.setMyScore(shooter.getMyScore() + 3);    this.hp -= damage;  if( this.hp<0 ){   step = 7;   cnt = 0;   tCnt = 0;//철수 타이밍 계산 리셋      //추락   this.degree = 180;   this.speed = 0.5f;  }      return ret; }
 @Override protected void checkHit() {  // TODO Auto-generated method stub    if( rect==null) return;    Vector<GameObject> enemies = scene.getChildrenByName("PLAYER");    for(int i=0;i<enemies.size();i++){      Player temp = (Player)enemies.get(i);   if( temp==null ) continue;
   if(temp.getState()!=1 || temp.isImmortal())//플레이어가 무적이거나 온플레이 상태가 아니면 충돌판단하지 않는다    continue;      Shape eRect = temp.getRect();   if( eRect==null ) continue;      if (rect.intersects(eRect)){        ParticleEffect efct = new ParticleEffect(scene, posX, posY, "rsc/game/eft_spark.png");    scene.addChild(efct);    efct.setStart(3, 3, 2, 1);        temp.setHit(hp);     break;   }  } }
 private float getTargetY(){    float retY;    Vector<GameObject> players = scene.getChildrenByName("PLAYER");  if(players.size()>0){      retY = players.get( rand.nextInt(players.size()) ).getPositionY();     }else{   //플레이어가 아무도 없다   retY = 240.0f;  }    return retY; }}
