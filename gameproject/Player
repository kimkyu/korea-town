package prefab;
import org.newdawn.slick.Color;import org.newdawn.slick.GameContainer;import org.newdawn.slick.Graphics;import org.newdawn.slick.Image;import org.newdawn.slick.geom.Point;import org.newdawn.slick.geom.Rectangle;import org.newdawn.slick.state.StateBasedGame;
import Scenes.GameScene;import forSlick2D.BasicScene;import forSlick2D.GameObject;
public class Player extends GameObject {
 Image img[] = new Image[9];//캐릭터 이미지 Image shieldImg;//실드 이미지 float speed; int myState;//현재 상태 boolean immortal;//무적 여부 int imTime;//무적 시간  int cnt; int shootCnt;  int myScore;//개인 점수 int myLife;//개인 라이프  int shieldCnt;//실드카운트 int keyBuff;//상하좌우 방향 버튼의 상태 int shootBuff;//발사 버튼의 상태 int anim;//애니메이션 값//두 객체가 겹치는 경우 어느 객체를 위 아래를 배치할 것인가에 대한 문제를 //ZOrder 개념을 사용해서 해결한다.//말그대로 XY 좌표가 아닌 Z 좌표의 순서를 값으로 지정 public Player() {  // TODO Auto-generated constructor stub }
 public Player(BasicScene scene) {  super(scene);  // TODO Auto-generated constructor stub }
 public Player(BasicScene scene, float posX, float posY, int tag) {  super(scene, posX, posY, tag);  // TODO Auto-generated constructor stub    String folder = "";    folder = (tag==0)?"player":"player2";
  try{
   for(int i=0;i<9;i++)    img[i] = new Image("rsc/" + folder + "/my_0" + i + ".png");      shieldImg = new Image("rsc/game/shield_.png");     }catch(Exception e){   e.printStackTrace();  }    this.zorder = 4;//둘째줄 구름보다는 앞에 오도록    speed = 3.5f;  myState = 0;//최초 등장시의 상태  myLife = 3;//최초 라이프  posX = -40;//화면 왼쪽 밖에서 등장    cnt = 0;  shootCnt = 0;  shieldCnt = 0;    keyBuff = 0;  shootBuff = 0;  anim = 0;    immortal = false; }
 @Override public void update() {  // TODO Auto-generated method stub
  switch(myState){  case 0://등장 중      posX += 2.0f;//오른쪽으로 이동      if(posX>=210)    myState = 1;//일정 위치까지 이동하면 I have control.      break;    case 1://콘트롤 자유      //무적 카운트   if(immortal){        if(imTime--<=0)     immortal = false;   }      if(tag==0){    keyBuff = ((GameScene)scene).getKeyBuff();    shootBuff = ((GameScene)scene).getKeyShootBuff();   }else{    keyBuff = ((GameScene)scene).getPadBuff();    shootBuff = ((GameScene)scene).getPadShootBuff();   }      MyMove();   break;     case 2://적탄에 맞음      if(cnt>40){    myState = 1;//경직이 일정시간 되면 다시 콘트롤 상태로    immortal = true;//연속으로 공격을 받으면 안되니까 무적 상태를 켠다    imTime = 90;//무적시간은 약 1.5초 (1프레임 1/60초니까)   }   break;    case 3://격추당함      posX += 2.0f;   posY += speed;//추락한다   speed+=0.15f;//추락속도 가속
   if(cnt%8==0){    ParticleEffect efct = new ParticleEffect(scene, posX, posY, "rsc/game/explode.png");    scene.addChild(efct);    efct.setScale(2.0f);    efct.setStart(4, 4, 4, 1);//프레임 구성이 가로로 4장, 세로로 4장, 프레임 당 딜레이 4카운트, 반복횟수 1회   }      if(posY>=520){    this.name = "PLAYER GAMEOVER";//네임을 변경해 PLAYER로 불러들여지지 않게 한다    ((GameScene)scene).setGameover(tag);//어느 캐릭터가 게임오버 되었는가 체크한다    //scene.removeChild(this);//화면 아래로 사라졌으면 자신의 삭제를 요청    myState = 4;//삭제하지 않고 화면에서 사라진 상태로 게임오버 상태   }   break;  case 4://게임 오버 상태   break;  }    cnt++; }
 @Override public void render(GameContainer cont, StateBasedGame state, Graphics g) {  // TODO Auto-generated method stub
  //임시 UI  String myUi = "Player" +(tag+1)+ " " + this.myScore + " Life " + this.myLife;    if( shieldCnt>0 )   myUi = "Player" +(tag+1)+ " " + this.myScore + " Shield " + shieldCnt;//실드가 있으면 라이프 대신 실드 표시    if(myState==4)   myUi = "Player" +(tag+1)+ " " + this.myScore + " Game Over";//게임오버 상태
  g.setColor(Color.white);  g.drawString(myUi, 10 + 320*this.tag, 30);    //posX, posY는 이미지의 중심점이다.   Image _img = img[anim];    switch(myState){  case 0://등장 중
   if(cnt%4<2)//점멸    return;      _img = img[anim + (cnt/4)%2];   break;  case 1://콘트롤 자유     _img = img[anim + (cnt/4)%2];      break;  case 2://적탄에 맞음
   if(cnt%4<2)//점멸    return;      _img = img[8];   break;  case 3://격추당함   _img = img[8];   break;  case 4://게임오버   return;//그려주지 않고 되돌아간다  }    _img.drawCentered(posX,  posY);
  if(shieldCnt>0){      Image _shieldImg = shieldImg.getScaledCopy(shieldImg.getWidth()/2, shieldImg.getHeight()/2);   _shieldImg.setRotation(cnt%360);   _shieldImg.setAlpha(0.5f);   _shieldImg.drawCentered(posX + 15, posY);  }
  if( shieldCnt>0 )   rect = new Rectangle(posX - 12, posY - 12, 24, 24);//실드 발동 중에는 충돌 rect를 더 크게  else   rect = new Rectangle(posX - 4, posY - 4, 8, 8);//플레이어 충돌 체크용 rect를 얻는다
  if(scene.getDebug()){   g.setColor(Color.red);   g.draw(rect);  }   }
 @Override public void remove() {  // TODO Auto-generated method stub
 }   private void MyMove(){    //keyBuff값에 따라서 이동하거나 총알을 쏜다    Point movePos = new Point(posX, posY);    switch(keyBuff){  case GameScene.CONTROL_UP:   movePos = GameScene.getNextPos(posX, posY, 0, speed);   anim = 0;   break;  case GameScene.CONTROL_DOWN:   movePos = GameScene.getNextPos(posX, posY, 180, speed);   anim = 0;   break;  case GameScene.CONTROL_LEFT:   movePos = GameScene.getNextPos(posX, posY, 270, speed);   anim = 4;   break;  case GameScene.CONTROL_RIGHT:   movePos = GameScene.getNextPos(posX, posY, 90, speed);   anim = 2;   break;  case GameScene.CONTROL_UP|GameScene.CONTROL_LEFT:   movePos = GameScene.getNextPos(posX, posY, 315, speed);   anim = 4;   break;  case GameScene.CONTROL_UP|GameScene.CONTROL_RIGHT:   movePos = GameScene.getNextPos(posX, posY, 45, speed);   anim = 2;   break;  case GameScene.CONTROL_DOWN|GameScene.CONTROL_LEFT:   movePos = GameScene.getNextPos(posX, posY, 225, speed);   anim = 4;   break;  case GameScene.CONTROL_DOWN|GameScene.CONTROL_RIGHT:   movePos = GameScene.getNextPos(posX, posY, 135, speed);   anim = 2;   break;  }    if(shootBuff==GameScene.CONTROL_SHOOT && shootCnt==0)   shootCnt = 1;
  if(shootCnt>0){      anim = 6;      //총알 발사를 호출한다   if(shootCnt==1){    Bullet bullet = new Bullet(scene, posX + 20, posY + 10, 0, 10.0f, 90, this);    bullet.setName("BULLET");    scene.addChild(bullet);   }   //   if(shootCnt==4){//    Bullet bullet1 = new Bullet(scene, posX + 20, posY + 10, 0, 10.0f, 70);//    scene.addChild(bullet1);//    Bullet bullet2 = new Bullet(scene, posX + 20, posY + 10, 0, 10.0f, 110);//    scene.addChild(bullet2);//   }      shootCnt++;      if(shootCnt==10)    shootCnt = 0;  }    //키에서 손을 떼면 애니메이션을 디폴트로  if(keyBuff==0 && shootBuff==0)   anim = 0;    posX = movePos.getX();  posY = movePos.getY();    //화면을 벗어나지 않게 한다  if(posX<0)   posX = 0.0f;  if(posX>640)   posX = 640.0f;  if(posY<0)   posY = 0.0f;  if(posY>480)   posY = 480.0f; }
 public int getState(){    return this.myState; } public void setHit(){    //총알이나 적 캐릭터와 충돌했을 때 호출된다  cnt = 0;  myLife--;
  if(myLife==0){   //격추   speed = 0.5f;   myState = 3;  }else   myState = 2; }
 public void setMyScore(int myScore){    this.myScore = myScore; } public int getMyScore(){    return this.myScore; }
 public void setMyLife(int myLife){    this.myLife = myLife; }  public int getMyLife(){    return myLife; }  public boolean isImmortal(){    return this.immortal; }  public void setHit(int damage){    if(shieldCnt>0){//실드가 있으면 실드가 라이프 대신 깎인다      shieldCnt--;   immortal = true;//연속으로 공격을 받으면 안되니까 무적 상태를 켠다   imTime = 15;//무적시간은 0.25초로 아주 짧게   return;  }    if( myLife==0 )   myState = 3;  else{   myState = 2;   myLife--;  }    cnt = 0; }  public void setShield(int shieldCnt){    //실드가 세팅된다. 실드 아이템을 먹었을 경우 이게 호출된다   this.shieldCnt = shieldCnt; } public int getShield(){    return this.shieldCnt; }}
