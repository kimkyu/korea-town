package prefab;
import java.util.Vector;
import org.newdawn.slick.Color;import org.newdawn.slick.GameContainer;import org.newdawn.slick.Graphics;import org.newdawn.slick.Image;import org.newdawn.slick.geom.Point;import org.newdawn.slick.geom.Shape;import org.newdawn.slick.state.StateBasedGame;
import Scenes.GameScene;import forSlick2D.BasicScene;import forSlick2D.GameObject;
public class Neuroi1 extends Enemy { 
 public Neuroi1() {  // TODO Auto-generated constructor stub  super(); }
 public Neuroi1(BasicScene scene) {  super(scene);  // TODO Auto-generated constructor stub }
 public Neuroi1(BasicScene scene, float posX, float posY, int tag) {  super(scene, posX, posY, tag);  // TODO Auto-generated constructor stub
  try{      img = new Image("rsc/game/enemy0_.png");   //img.setCenterOfRotation(0.5f, 0.5f);     }catch(Exception e){   e.printStackTrace();  }    hp = 2;  isLive = false;//최초에는 잠궈준다. setInit에서 초기화 하면 true 처리  this.zorder = 4;//기본적으로는 플레이어나 총알과 같은 우선순위 }
 @Override public void update() {  // TODO Auto-generated method stub
  if(!isLive)   return;    cnt++;    Point pos = new Point(posX, posY);    pos = GameScene.getNextPos(posX, posY, degree, speed);    posX = pos.getX();  posY = pos.getY();      //무빙 1일 경우  //스텝 1 : x좌표가 190이하가 될 때 까지 일직선으로 왼쪽으로 진행  //스텝 2 : x좌표가 330이상이 될 때 까지 대각선으로 후퇴. 발생 y좌표가 240 이하였던 캐릭터는 아래로, 초과인 캐릭터는 위로  //스텝 3 : x좌표가 330 이상이 되면 다시 일직선으로 왼쪽으로 진행해 화면 왼쪽 밖으로  if(moving==1){      if(step==1 && posX<=190){    //x좌표가 190이하가 되어 step을 2로 이행    step = 2;    if(posY<=240)     degree = 112.5f;    else     degree = 67.5f;   }      if(step==2 && posX>=330){    //x좌표가 350 이상이 되어 step을 3으로 이행    step = 3;    degree = 270;   }  }  //moving==2  /*스텝 1 : x좌표가 플레이어 x 좌표 이하가 될 때 까지 왼쪽으로 진행. 이때 발생 y좌표가 240 이하면 약간 아래를, 초과면 위를 향한 완만한 사선이다.     스텝 2 : 플레이어 x 좌표 이하가 되었다면 스피드가 0 이하가 될 때 까지 속적으로 스피드를 감속한다.     스텝 3 : 스피드가 0이 되면 degree를 360-degree 값으로 바꾸고(y플립된 사선이 된다), 스피드를 지속적으로 가속하여 오른쪽으로 사라진다.*/  if(moving==2){
   float turningPoint;   Vector<GameObject> target = scene.getChildrenByName("PLAYER");
   if(target.size()>0){    Player _player = (Player)target.get(rand.nextInt(target.size()));    turningPoint = _player.getPositionX();   }else    turningPoint = 220;//플레이어 캐릭터가 하나도 없는 경우         if(step==1 && turningPoint>=posX){    step = 2;   }      if(step==2){    speed -= 0.2f;    if(speed<=0.0f){     step = 3;     degree = 360 - degree;    }   }      if(step==3)    speed += 0.15f;  }    //총알 발사  if(cnt%70==0){      Vector<GameObject> temp = scene.getChildrenByName("PLAYER");      if(temp.size()>0){    Player target = (Player)temp.get(rand.nextInt(temp.size()));//목표가 될 플레이어를 랜덤하게 선택한다        //플레이어를 향해 degree를 구한다    float _degree = BasicScene.getDegree(posX, posY, target.getPositionX(), target.getPositionY());        EBullet1 bullet = new EBullet1(scene, posX, posY, 0, 2.0f, (int)_degree);    bullet.setName("EBULLET");    scene.addChild(bullet);   }  }    //플레이어 캐릭터와 충돌했는지 검사  checkHit();      //화면 좌우 밖으로 나가면 제거  if(posX<-50 || posX>690){      scene.removeChild(this);  } } //이미지를 나눠줌 @Override public void render(GameContainer cont, StateBasedGame state, Graphics g) {  // TODO Auto-generated method stub    if(!isLive)   return;
  rect = BasicScene.drawClipped(g, img, posX, posY, 36, 36, (cnt%21)/3, 0);    if(scene.getDebug()){   g.setColor(Color.red);   g.draw(rect);  } }
 @Override public void remove() {  // TODO Auto-generated method stub
 }
  @Override public void setInit(float posX, float posY, int moving){    //Neuroi1은 posX값은 무시한다  this.posY = posY;  this.moving = moving;    if(moving==1){   speed = 2.5f;   degree = 270;  }else{   speed = 4.5f;   if(posY<=240)    degree = 270 - rand.nextFloat()*15;   else    degree = 270 + rand.nextFloat()*15;  }    step = 1;  cnt = 0;    isLive = true; }  @Override public int setHit(int damage, Player shooter){    int ret = damage - this.hp;    this.hp -= damage;  if( this.hp<0 ){
   //파괴되었으므로 폭연 이펙트를 그린다   ParticleEffect efct = new ParticleEffect(scene, posX, posY, "rsc/game/explode.png");   scene.addChild(efct);   efct.setScale(2.0f);   efct.setStart(4, 4, 2, 1);//프레임 구성이 가로로 4장, 세로로 4장, 프레임 당 딜레이 2카운트, 반복횟수 1회      ((GameScene)scene).playSound(2);//파괴      scene.removeChild(this);//네우로이의 HP가 0 이하이므로 소멸 요청을 한다      if( shooter!=null ){        shooter.setMyScore(shooter.getMyScore() + 10);   }
   //아이템을 생성한다   CoinItem item = new CoinItem(scene, posX, posY, 0);   scene.addChild(item);  }    return ret;//총알의 남은 데미지를 돌려준다 }
 @Override protected void checkHit(){    if( rect==null) return;    Vector<GameObject> enemies = scene.getChildrenByName("PLAYER");    for(int i=0;i<enemies.size();i++){      Player temp = (Player)enemies.get(i);   if( temp==null ) continue;
   if(temp.getState()!=1 || temp.isImmortal())//플레이어가 무적이거나 온플레이 상태가 아니면 충돌판단하지 않는다    continue;      Shape eRect = temp.getRect();   if( eRect==null ) continue;      if (rect.intersects(eRect)){        ParticleEffect efct = new ParticleEffect(scene, posX, posY, "rsc/game/eft_spark.png");    scene.addChild(efct);    efct.setStart(3, 3, 2, 1);        temp.setHit(hp);     break;   }  } }}
