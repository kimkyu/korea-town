package prefab;
import java.util.Vector;
import org.newdawn.slick.Color;import org.newdawn.slick.GameContainer;import org.newdawn.slick.Graphics;import org.newdawn.slick.Image;import org.newdawn.slick.geom.Point;import org.newdawn.slick.geom.Shape;import org.newdawn.slick.state.StateBasedGame;
import Scenes.GameScene;import forSlick2D.BasicScene;import forSlick2D.GameObject;
public class Neuroi2 extends Enemy {
 public Neuroi2() {  // TODO Auto-generated constructor stub  super(); }
 public Neuroi2(BasicScene scene) {  super(scene);  // TODO Auto-generated constructor stub }
 public Neuroi2(BasicScene scene, float posX, float posY, int tag) {  super(scene, posX, posY, tag);  // TODO Auto-generated constructor stub
  try{      img = new Image("rsc/game/enemy0_1.png");   //img.setCenterOfRotation(0.5f, 0.5f);     }catch(Exception e){   e.printStackTrace();  }    isLive = false;//최초에는 잠궈준다. setInit에서 초기화 하면 true 처리  this.zorder = 4;//기본적으로는 플레이어나 총알과 같은 우선순위 }
 @Override public void update() {  // TODO Auto-generated method stub
  if(!isLive)   return;    cnt++;    Point pos = new Point(posX, posY);    pos = GameScene.getNextPos(posX, posY, degree, speed);    posX = pos.getX();  posY = pos.getY();  
  switch(step){  case 1://위 또는 아래로 이동 중   if( (moving==0 && this.posY>=120.0f)//아래로 내려오는 경우라면, y좌표가 120에 도달     ||(moving==1 && this.posY<=360.0f)){//위로 올라가는 경우라면 y좌표가 360에 도달        step = 2;    cnt = 0;    speed = 0;//정지   }   break;  case 2://이동 끝내고 잠시 대기   if( cnt>20 ){    step = 3;    cnt = 0;   }   break;  case 3://총알 발사 중
   if(cnt%3==1){//cnt는 0부터 시작해서 360까지.        EBullet1 bullet = new EBullet1(scene, posX, posY, 0, 2.0f, 361 - cnt*2);    bullet.setName("EBULLET");    scene.addChild(bullet);   }      if( cnt>180 ){    step = 4;    cnt = 0;   }   break;  case 4://총알발사 끝내고 잠시 대기   if( cnt>20 ){    step = 5;    cnt = 0;    degree = 270;   }   break;  case 5://왼쪽으로 가속하며 사라진다   speed += 0.1f;    break;  }      //플레이어 캐릭터와 충돌했는지 검사  checkHit();      //화면 좌우 밖으로 나가면 제거  if(posX<-50 || posX>690){      scene.removeChild(this);  } }
 @Override public void render(GameContainer cont, StateBasedGame state, Graphics g) {  // TODO Auto-generated method stub    if(!isLive)   return;
  rect = BasicScene.drawClipped(g, img, posX, posY, 36, 36, (cnt%21)/3, 0);    if(scene.getDebug()){   g.setColor(Color.red);   g.draw(rect);  } }
 @Override public void remove() {  // TODO Auto-generated method stub
 }
  @Override public void setInit(float posX, float posY, int moving){    //인수로 받은 posX, posY, moving값은 무시한다  //posX, posY, moving에서 this.를 생략하면, 인수로 받은 값이 되어버리니 주의    hp = 10;//내구력은 10  this.posX = posX;//480.0f;//최초 x좌표는 항상 480    //어느 플레이어를 등장 기준으로 삼을 것인가  if(posY==0){   Vector<GameObject> players = scene.getChildrenByName("PLAYER");   if(players.size()>0){        if(players.get( rand.nextInt(players.size()) ).getPositionY()<=240)//둘 중 랜덤한 하나 또는 하나의 y좌표가 240 이하인가 판단해     this.posY = 520;//이하라면 화면 아래에서    else     this.posY = -40;//이상이라면 화면 위에서 등장       }else{    //플레이어가 아무도 없다    this.posY = rand.nextInt(2)==1?-40:520;//랜덤하게 등장 위치를 지정   }  }else   this.posY = posY;//지정되면 지정된 좌표에서 등장
  speed = 2.5f;  this.moving = (this.posY<=-40)?0:1;//위에서 등장했으면 moving=0, 아니면 1    if(this.moving==0){   degree = 180;//아래로 이동한다  }else{   degree = 0;//위로 이동한다  }    step = 1;  cnt = 0;    isLive = true; }  @Override public int setHit(int damage, Player shooter){    int ret = damage - this.hp;    this.hp -= damage;  if( this.hp<0 ){
   //파괴되었으므로 폭연 이펙트를 그린다   ParticleEffect efct = new ParticleEffect(scene, posX, posY, "rsc/game/explode.png");   scene.addChild(efct);   efct.setScale(2.0f);   efct.setStart(4, 4, 2, 1);//프레임 구성이 가로로 4장, 세로로 4장, 프레임 당 딜레이 2카운트, 반복횟수 1회      ((GameScene)scene).playSound(2);//파괴      scene.removeChild(this);//네우로이의 HP가 0 이하이므로 소멸 요청을 한다      if( shooter!=null ){        shooter.setMyScore(shooter.getMyScore() + 100);   }      //아이템을 생성한다   if( rand.nextInt(10)<7 ){        CoinItem item = new CoinItem(scene, posX, posY, 0);    scene.addChild(item);   }else{        //낮은 확률로 실드 아이템이 나온다    ShieldItem item = new ShieldItem(scene, posX, posY, 0);    scene.addChild(item);   }  }    return ret;//총알의 남은 데미지를 돌려준다 }
 @Override protected void checkHit(){    if( rect==null) return;    Vector<GameObject> enemies = scene.getChildrenByName("PLAYER");    for(int i=0;i<enemies.size();i++){      Player temp = (Player)enemies.get(i);   if( temp==null ) continue;
   if(temp.getState()!=1 || temp.isImmortal())//플레이어가 무적이거나 온플레이 상태가 아니면 충돌판단하지 않는다    continue;      Shape eRect = temp.getRect();   if( eRect==null ) continue;      if (rect.intersects(eRect)){        ParticleEffect efct = new ParticleEffect(scene, posX, posY, "rsc/game/eft_spark.png");    scene.addChild(efct);    efct.setStart(3, 3, 2, 1);        temp.setHit(hp);     break;   }  } }}
